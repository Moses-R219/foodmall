emmet
async and defer
cors
crossorgin


BUNDLER ---------PARCEL,WEBPACK,VITE,ESBLIND
PARCEL IS BEST TOOL FOR BUNDLER WHICH HAVE ALL MODULES ARE WRITTEN AND GIVE OUTPUT AS JS FILE
HMR-(HOT MODULE REPLACEMENT) automatically reloads the live localhost when any file changes it uses FILE WATCHER Algorithm which is written in C++
Parcel is used to remove console log but it not 


npm init will  generate package.json
npm i -D parcel to install it as devDependencies only for developer machine not in production
script types ---- homework

we need to add package-lock.json in git dont add in gitignore




npx==npm run
babel plugin transform remove console
react conciliation key react documentation 	
no same key for two tags/elements or siblings 
React.createElement gives us an Object
what is difference between HTML and JSX

JSX uses React.createElement in backend most of us don't know   babel converts JSX into React.createElement


const head=<h1>Namaste React</h1>------->JSX
	|
	|
	|
const head=React.createElement("h1",{},"Namaste react"); converted by Babel



Functional Component---it is normal function in javascript

Component name starts with Capital Letter it is not must but it is recommended for good practice.

Component Composition----using component inside component it is kown as component composition


React.Fragment is used to avoid the use of extra div when there is already div with id="root"
React.Fragment is a component which is exported from React ----it is like an empty tag <></>
jsx must have one and only parent element


can we use React.Fragment inside React.Fragment?
Optional chaining (?.)
React Key ---uses reconciliation diff Algorithm
React Fiber archtitecture
Never ever use index as key in react


We can export component by two types
	1.export  by default 
		syntax:export default Title 
	2.export  by name(const) 
		syntax:export const Title 
export default is used for exporting only one component

While importing these they will differ
	import Title from "./component/Title";-------Default import
	import {Title} from "./component/Title";-------Named import



Hooks==
		It is normal function with some extra function
useState return a new array which is used to store an local state variable
const [variable_name,function to change variable_name]=useState();



img https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_660/lb39blos1elub2gfjm9q

useEffect===>
		useEffect((callback),dependency)
		empty array dependency=== will be called once after rendering
		dependency array[variable_name]===will be called once + again for everytime changes in value	

shimmer effect 


api link:https://www.swiggy.com/dapi/restaurants/list/v5?lat=11.3355423&lng=77.7143421&is-seo-homepage-enabled=true&page_type=DESKTOP_WEB_LISTING'
https://www.swiggy.com/dapi/restaurants/list/v5?lat=13.0826802&lng=80.2707184&page_type=DESKTOP_WEB_LISTING

useEffect--it will render only after initial rendering finished



formik website templates to create forms in react 

npm install react-router-dom

createBrowserRouter--- it contains list of path each path is an object like below
{
	path:"/"
	element:<Component name/>
	errorElement:to render error,
	children:[]---it contains list of nested path and element to render
}


<Outlet/>--- it will take charge to load the children component

Menu api:"https://www.swiggy.com/dapi/menu/pl?page-type=REGULAR_MENU&complete-menu=true&lat=12.89960&lng=80.22090&restaurantId=64700&catalog_qa=undefined&submitAction=ENTER"


Object.values()---read about this

while using map dont forget about key index value

-------------------------
data.cards[2].groupedCard.cardGroupMap.REGULAR.cards[2].card.card.itemCards[0].card.info
data.cards[2].groupedCard.cardGroupMap.REGULAR.cards[1].card.card.itemCards
------------------------
******************************
ch-8--lets get classy
******************************
class based components 

class ClassComponent extends React.component{}--normal javascript class but React.component decides it as class components

constructor(props){
Q1)))	super(props)---why we using super(props)
}
inside constructor we create state variable
this.state--=holds the object of variables
this.state={
	count:0,
} 

-----to update this state variable
	we use this.setState({
		count:1,
	})
	**WE DO NOT MUTATE STATE DIRECTLY LIKE
			this.state.count=1----wrong way
REACT LIFECYLCE
	1.constructor is called
	2.render method called
	3.componentDidMount()  called

why we call api in useEffect and component?
	Because it runs after rendered..
	api call is done in useEffect() call--it is called after rendered

Two phases--
Render phases--includes constructor and render method
Commit phases--includes modifying dom,componentDidMount


Q2)))We can use async on componentDidMount but we cannot use async on callback of useEffect()


1.componentDidMount--after first render it will be called only once
2.componentDidUpdate--after each and every subsequent render,after any changes in state
3.componentWillUnmount--after changing the page denotes that unloading the component

Till now we have seen hooks like	
	useEffect()
	useState()
	useParams() from react-router-dom
	useRouterError() from react-router-dom

************************
CH-9 Optimizing app
************************

utils--helper function
	this makes more readable,reusable and  more testable

created useRestaurantMenu(our own custom hook) component for api call which gets resId from RestaurantMenu component
functional component which will return some JSX but hooks return some logic or extract some logic

make api call of food menu into const name="";
adding new feature to check user is online or offline by creating useOnline() component

*********************
const useOnline=()=>{
    const [status,setStatus]=useState(true);
    useEffect(()=>{
        window.addEventListener('online',()=>{
            setStatus(true);
        })
        window.addEventListener('offline',()=>{
            setStatus(false);
        })
    },[])

    return status;
}
****************
the above component is bad way we are not doing removeListener this is not good practice for developer


homework--make restaurants also custom hook

chunking
code splitting
Dynamic bundling
lazy loading
on demand loading
Dynamic Import


On demand loading--on rendering ---it will suspend the rendering

lazy()
<Suspense></Suspense>


---------------------------
CH-10--styling our react components
---------------------------

Normal native css
SCSS
Inline css
Component --Material Ui,Ant ,ChakraUI,Baseweb Ui
Styled Component
Tailwind--gonna be use


.postcssrc---which will tell us we will be using tailwind change them into native css file

tailwind provide us default classname value which is fixed we need to provide our own value
then we give w-[inside value]









--------------------
CH-11 
-------------------
HIGHER ORDER COMPONENT
		get a component return a component

accordion styling 

created categories component for menu 
and item list  component for accordion body menus
Controlled and uncontrolled component
